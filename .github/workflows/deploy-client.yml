name: Deploy Client

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: deploy-client-production
  cancel-in-progress: false

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}-client

jobs:
# ---------- 1. BUILD & PUSH IMAGE ----------
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set image tag (commit SHA)
        id: meta
        run: echo "image_tag=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        run: |
          docker build \
            -f client/Dockerfile \
            --build-arg NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }} \
            -t $IMAGE_NAME:latest \
            -t $IMAGE_NAME:${{ steps.meta.outputs.image_tag }} .

      - name: Push image
        run: |
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ steps.meta.outputs.image_tag }}

# ---------- 2. DEPLOY ON VDS ----------
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    env:
      HOST: ${{ secrets.VDS_HOST }}
      PORT: ${{ secrets.VDS_PORT }}
      USER: ${{ secrets.VDS_USER }}
      IMAGE_NAME: ghcr.io/${{ github.repository }}-client
      TAG: ${{ needs.build-and-push.outputs.image_tag }}
      CONTAINER_NAME: client_app

    steps:
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VDS_SSH_KEY }}

      - name: Debug vars
        run: echo "Deploying to $HOST:$PORT as $USER"

      - name: Add VDS host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "$PORT" "$HOST" >> ~/.ssh/known_hosts

      - name: Deploy on server
        run: |
          ssh -p "$PORT" "$USER@$HOST" bash -s -- <<EOF
            set -euo pipefail

            echo "Pull image..."
            docker pull "$IMAGE_NAME:$TAG" || docker pull "$IMAGE_NAME:latest"

            echo "Stop old container (if exists)..."
            docker rm -f "$CONTAINER_NAME" 2>/dev/null || true

            echo "Run new container..."
            docker run -d \
              --name "$CONTAINER_NAME" \
              --restart unless-stopped \
              -p 3000:3000 \
              "$IMAGE_NAME:$TAG"

            echo "Prune dangling images..."
            docker image prune -f --filter "until=48h" || true
            echo "âœ… Deploy complete"
          EOF
